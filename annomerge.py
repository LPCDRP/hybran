# Author: Deepika Gunasekaran
# Title: Merge synteny annotation from Prokka for the positions which ar not 
# annotated by RATT
# Description: This program takes as input, the ouput generated by bedtools for 
# the missing synteny information from prokka and formats it to gff to 
# facilitate the conversion of gff to embl and merges the Prokka annotation with
# the RATT annotation in an embl file.
# Note: This program generates the gff file with the missing synteny information
# in addition to the merged embl file, in case a merged annotation in gff format
# is required later.


from Bio import SeqIO
from Bio.SeqFeature import SeqFeature, FeatureLocation


def fileModify(query):
    '''
    This function takes as input a list (each element of the list representing a
    line of the bedtools output) and formats it to a gff file (similar to the 
    gff annotation file generated by prokka). 
    '''
    return_gff = ''
    for i in query:
        line_list = i.split('\t')
        line_list_suf = line_list[6:9]
        line_last = line_list[9]
        line = (line_list[3] + '\t' + line_list[4] + '\t' + line_list[5] + '\t' 
        + str(line_list[1]) + '\t' + str(line_list[2]) + '\t')
        for k in line_list_suf:
            line = line + str(k) + '\t'
        line += line_last
        return_gff += line
    return return_gff

# Required input files:
# 1. Bedtools output: with 1st column containing the word 'Synteny', 2nd and 3rd
#    columns containing the start and stop positions of the feature (CDS, 
#    signal peptide, etc.), 6th column containing the feature type ('CDS', 
#    'signal peptide', etc.), 8th column containing the strand information (+ or 
#    -) and 19th column containing description of the feature (ID, ec_number, 
#    gene, etc.)
# 2. RATT annotation in a valid embl file.

output_raw = open('/home/dgunasek/Work/projects/annomerge/bedtools_output', 'r')
output_clean = open('/home/dgunasek/Work/projects/annomerge/bedtools_result.gff','w')
embl_record = SeqIO.read('/home/dgunasek/Work/projects/annomerge/A6.embl', 'embl')

# Read lines from the bedtools output and save them in the output_lines list
output_lines = []
for line in output_raw:
    output_lines.append(line)
    
# Generate the gff format and write to file 
gff_raw = fileModify(output_lines)
output_clean.write(gff_raw) 


overlap_gff = gff_raw.split('\n')
for seq in overlap_gff:
    # Check if line is not empty
    if len(seq) != 0:
        seq_components = []
        seq_components = seq.split('\t')
    # Build the information from gff format to generate the features for the 
    # embl file 
    if seq_components[6] == '-':
        strand_info = -1
    elif seq_components[6] == '+':
        strand_info = 1
    else:
        strand_info = 0
    qualifier_list = seq_components[8].split(';')
    feature_qualifiers = {}
    for qual in qualifier_list:
        add_qual = qual.split('=')
        feature_qualifiers[add_qual[0]] = add_qual[1]
    new_feature = SeqFeature(FeatureLocation(int(seq_components[3]), 
    int(seq_components[4]), strand=strand_info), type=seq_components[2], 
    qualifiers=feature_qualifiers)
    # Append features to the existing features (generated using RATT)
    embl_record.features.append(new_feature)

SeqIO.write(embl_record, '/home/dgunasek/Work/projects/annomerge/merged_annotation.embl', 'embl')

# Generated putput files:
# 1. gff file containing synteny information that is missing in the RATT 
#    annotation, retreived from Prokka using bedtools (bedtools_result.gff)
# 2. embl file containing merged synteny information from RATT and Prokka
#    (merged_annotation.embl)

# Close all files
output_raw.close()
output_clean.close()


  