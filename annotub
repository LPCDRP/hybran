#!/usr/bin/env python2.7
import os
import argparse
import subprocess
import logging
import time

from lib import verifyInstallations, fileManager, firstReference, fastaFromGFF, BLAST, CDHIT, MCL, addEggnogAnnotation, \
    parseClustering, annomerge

__version__ = '1.0'


def run_ratt_prokka(ref_dir, fasta, ref_cds, script_dir, cpus):
    """
    Executes RATT and Prokka that resides in ratt_prokka.sh
    File IO is handled by ratt_prokka.sh

    :param ref_dir: str directory that houses the EMBL reference(s)
    :param fasta: str FASTA file name that needs to be annotated
    :param ref_cds: str FASTA proteome of the reference for Prokka
    :param script_dir: str absolute path to ratt_prokka.sh
    :param cpus: str number of processors/cpus
    :return: None
    """
    logger = logging.getLogger('ProkkaRATTAnnomerge')
    c = os.getcwd()
    isolate = fasta.split('/')[-1].split('.')[0]
    logger.info('Executing RATT and Prokka on ' + isolate)
    try:
        os.mkdir(isolate)
    except OSError:
        pass
    os.chdir(isolate)
    cmd = [script_dir + '/lib/ratt_prokka.sh',
           ref_dir,
           fasta,
           isolate,
           ref_cds,
           cpus]
    subprocess.call(cmd)
    os.chdir(c)


def run_clustering(annotations, nproc):
    """
    Runs the clustering pipeline which uses CDHIT and MCL
    to cluster orthologous genes. File IO is handled by
    each function

    :param annotations: str directory of all annotations created by annomerge
    :param nproc: str number of processors
    :return: None
    """
    logger = logging.getLogger('ClusterProteins')
    c = os.getcwd()
    try:
        os.mkdir('clustering')
    except OSError:
        pass
    os.chdir('clustering')
    fasta = 'cds_seqs.fasta'
    if fasta not in os.listdir(os.getcwd()):
        logger.info('Parsing GFFs in ' + annotations)
        gff_gene_dict = fastaFromGFF.create_fasta(directory=annotations)
        clusters = CDHIT.cd_hit(nproc=nproc,
                                fasta=fasta,
                                out='cdhit_clusters.fasta')
        BLAST.run_blast(fastafile='cdhit_clusters.fasta',
                        nproc=nproc)
        MCL.run_mcl(in_blast='blast_results',
                    cdhit_clusters=clusters,
                    out_name='clustered_proteins',
                    gene_names=gff_gene_dict)
    os.chdir(c)
    # exit()
    parseClustering.parseClustersUpdateGBKs(gffs=annotations,
                                            clusters='clustering/clustered_proteins')


def run_eggnog_mapper(script_dir, nproc, emapper_loc):
    """
    Runs the run_emapper.sh which executes emapper.py for
    both diamond and hmmer algorithms. The shell script handles
    all file IO

    :param script_dir: str absolute path to run_emapper.sh
    :param nproc: str number of processors
    :param emapper_loc: str absolute path to eggnog database
    :return: None
    """
    logger = logging.getLogger('OrthologousAnnotation')
    logger.info('Functional annotation with eggnog_mapper')
    try:
        os.mkdir('eggnog-mapper-annotations')
    except OSError:
        pass
    cmd = [script_dir + '/lib/run_emapper.sh',
           nproc,
           emapper_loc]
    subprocess.call(cmd)
    addEggnogAnnotation.update_gbks()


def convert_gbk_to_gff(gbk_filename):
    """
    Runs a subprocess seqret call to convert the input
    gbk_filename to a GFF

    :param gbk_filename: str filename of a Genbank file that needs to be converted to GFF
    :return: None
    """
    seqret_cmd = ['seqret',
                  gbk_filename,
                  gbk_filename.split('.')[0] + '.gff',
                  '-feature', '-osf', 'gff']
    subprocess.Popen(seqret_cmd, stderr=os.devnull)


def cmds():
    """
    argparse parse input provided by the user

    :return: argparse.parse_args() object
    """
    parser = argparse.ArgumentParser(description='Annotate TUBerculosis: a pipeline to annotate Mycobacterium '
                                                 'tuberculosis de novo assembled genomes. Annotation of other species '
                                                 'or mixing species within an annotation run is NOT recommended.'
                                                 '\n\nPlease cite: [manuscript submitted]')
    required = parser.add_argument_group('Required')
    optional = parser.add_argument_group('Optional')
    required.add_argument('-g', '--genomes', help='Directory containing all genomes desired to be annotationed. '
                                                  'FASTA format required',
                          required=True)
    required.add_argument('-r', '--references', help='Directory containing EMBL and Genbank files of reference '
                                                     'annotations to transfer. Only the first 30 reference annotations '
                                                     'will be transferred with RATT and the first annotation will '
                                                     'be used as the reference database in the Prokka reference '
                                                     'step.',
                          required=True)
    required.add_argument('-e', '--eggnog-databases', help='Directory of the eggnog databases downloaded using '
                                                           'download_eggnog_data.py. Full path only',
                          dest='database_dir',
                          required=True)
    optional.add_argument('-o', '--output', help='Directory to output all new annotation files. Default is the current '
                                                 'working directory. Full path only',
                          default=os.getcwd())
    optional.add_argument('-n', '--nproc', help='Number of processors/CPUs to use. Default is 1',
                          default='1')
    optional.add_argument('-v', '--version', help='Print version and exit',
                          action='store_true')
    optional.add_argument('--verbose', action='store_true', help='Verbose output')
    return parser.parse_args()


def main():
    """
    Annotate TUBerculosis: a pipeline to annotate Mycobacterium
    tuberculosis de novo assembled genomes. Annotation of other species
    or mixing species within an annotation run is NOT recommended.

    :return: None
    """
    args = cmds()
    script_dir = os.path.abspath(os.path.dirname(__file__))
    if args.version:
        print __version__
        exit()
    verifyInstallations.verify_installations(args.database_dir)
    start_time = time.time()
    print '\n\t\t\tPlease cite:\n\t\t\t[manuscript submitted]\n\n'
    if args.verbose:
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s:%(levelname)s:%(name)s:%(message)s')
    else:
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s:INFO:%(name)s:%(message)s')
    logger = logging.getLogger('AnnoTUB')
    cwd = os.getcwd() + '/'

    # Convert all input paths to full path if not given as full path
    args.genomes = fileManager.full_path(args.genomes)
    args.references = fileManager.full_path(args.references)
    args.output = fileManager.full_path(args.output)

    # Moving into the desired annotation directory
    os.chdir(args.output)
    # Setting up RATT references
    refdir, embl_dir, embls = fileManager.ratt_references(args)
    # Getting first reference information
    first_reference = embls[0]
    first_reference_gbk = args.references + first_reference.split('.')[0] + '.gbk'
    ref_cds, ref_genome = firstReference.get_first_reference_proteome(first_reference_gbk)

    # Calling all steps for AnnoTUB
    genome_count = 0
    for f in os.listdir(args.genomes):
        if f.endswith('.fasta'):
            genome_count += 1
            filename = f.split('.')[0]
            run_ratt_prokka(ref_dir=embl_dir,
                            fasta=args.genomes + f,
                            ref_cds=args.output + ref_cds,
                            script_dir=script_dir,
                            cpus=args.nproc)
            logger.info('Running annomerge on ' + filename)
            annomerge.run(isolate_id=filename,
                          annotation_fp=cwd,
                          ref_proteins_fasta=ref_cds,
                          ref_embl_fp=args.references + first_reference,
                          reference_genome=ref_genome,
                          script_directory=script_dir)
            convert_gbk_to_gff(filename + '.gbk')
    run_clustering(annotations=refdir,
                   nproc=args.nproc)
    run_eggnog_mapper(script_dir=script_dir,
                      nproc=args.nproc,
                      emapper_loc=args.database_dir)
    logger.info('Finished. Annotated ' + str(genome_count) + ' genomes. Genbank and GFF are located in ' + args.output)
    logger.info('Time elapsed: ' + str((time.time() - start_time) / 60.0) + 'min')
    logger.info('Thank you for using AnnoTUB. We hope to see you again!')


if __name__ == '__main__':
    main()
