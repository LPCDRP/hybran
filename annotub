#!/usr/bin/python2.7
import os
import shutil
import argparse
import subprocess
import logging
import time
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq

from lib import fastaFromGFF, BLAST, CDHIT, MCL, addEggnogAnnotation, parseClustering, annomerge

__version__ = '1.0'


def verify_installations(eggnog_databases):
    logger = logging.getLogger('VerifyInstallations')

    # Verify the RATT_HOME variable is set
    if not os.environ['RATT_HOME']:
        logger.error('RATT_HOME variable is not defined. '
                     'Please export RATT_HOME=[location of downloaded ratt executable/config')
        exit(EnvironmentError)
    # Verify eggnog-mapper/ is present in given directory
    if not os.path.isdir(eggnog_databases):
        logger.error('There are no databases in ' + eggnog_databases + '. Location of eggnog databases is required.'
                                                                       '\nIf the databases have not been downloaded, '
                                                                       'execute download_eggnog_data.py and follow '
                                                                       'prompts. The Diamond AND HMM databases are '
                                                                       'required.')
        exit(OSError)


def run_ratt_prokka(ref_dir, fasta, ref_cds, script_dir, cpus):
    logger = logging.getLogger('ProkkaRATTAnnomerge')
    c = os.getcwd()
    isolate = fasta.split('/')[-1].split('.')[0]
    logger.info('Executing RATT, Prokka, and annomerge on ' + isolate)
    try:
        os.mkdir(isolate)
    except OSError:
        pass
    os.chdir(isolate)
    cmd = [script_dir + '/lib/ratt_prokka.sh',
           ref_dir,
           fasta,
           isolate,
           ref_cds,
           cpus]
    subprocess.call(cmd)
    os.chdir(c)


def run_clustering(annotations, nproc):
    logger = logging.getLogger('ClusterProteins')
    c = os.getcwd()
    try:
        os.mkdir('clustering')
    except OSError:
        pass
    os.chdir('clustering')
    fasta = 'cds_seqs.fasta'
    if fasta not in os.listdir(os.getcwd()):
        logger.info('Parsing GFFs in ' + annotations)
        gff_gene_dict = fastaFromGFF.create_fasta(directory=annotations)
        clusters = CDHIT.cd_hit(nproc=nproc,
                                fasta=fasta,
                                out='cdhit_clusters.fasta')
        BLAST.run_blast(fastafile='cdhit_clusters.fasta',
                        nproc=nproc)
        MCL.run_mcl(in_blast='blast_results',
                    cdhit_clusters=clusters,
                    out_name='clustered_proteins',
                    gene_names=gff_gene_dict)
    os.chdir(c)
    # exit()
    parseClustering.parseClustersUpdateGBKs(gffs=annotations,
                                            clusters='clustering/clustered_proteins')


def run_eggnog_mapper(script_dir, nproc, emapper_loc):
    logger = logging.getLogger('OrthologousAnnotation')
    logger.info('Functional annotation with eggnog_mapper')
    try:
        os.mkdir('eggnog-mapper-annotations')
    except OSError:
        pass
    cmd = [script_dir + '/lib/run_emapper.sh',
           nproc,
           emapper_loc]
    subprocess.call(cmd)
    addEggnogAnnotation.update_gbks()


def get_first_reference_proteome(genbank):
    logger = logging.getLogger('ReferenceDatabase')
    logger.info('Creating a reference proteome FASTA for Prokka from ' + genbank)
    seqs = []
    for record in SeqIO.parse(genbank, 'genbank'):
        if record.features:
            for feature in record.features:
                if feature.type == 'CDS':
                    try:
                        gene = feature.qualifiers['gene'][0]
                    except KeyError:
                        gene = ''
                    try:
                        locus_tag = feature.qualifiers['locus_tag'][0]
                    except KeyError:
                        locus_tag = ''
                    if not locus_tag and not gene:
                        logger.error('No locus tag or gene name for the following Genbank entry. Please check the '
                                     'Genbank file\n' + str(feature))
                        exit(KeyError)
                    seq_record_id = locus_tag + ':' + gene
                    seq_record = SeqRecord(Seq(feature.qualifiers['translation'][0]),
                                           id=seq_record_id,
                                           description='')
                    seqs.append(seq_record)
    with open('ref_proteome.fasta', 'w') as output:
        for s in seqs:
            SeqIO.write(s, output, 'fasta')
    return 'ref_proteome.fasta'


def cmds():
    parser = argparse.ArgumentParser(description='Annotate TUBerculosis: a pipeline to annotate Mycobacterium '
                                                 'tuberculosis de novo assembled genomes. Annotation of other species '
                                                 'or mixing species within an annotation run is NOT recommended.'
                                                 '\n\nPlease cite: [manuscript submitted]')
    required = parser.add_argument_group('Required')
    optional = parser.add_argument_group('Optional')
    required.add_argument('-g', '--genomes', help='Directory containing all genomes desired to be annotationed. '
                                                  'FASTA format required',
                          required=True)
    required.add_argument('-r', '--references', help='Directory containing EMBL and Genbank files of reference '
                                                     'annotations to transfer. Only the first 30 reference annotations '
                                                     'will be transferred with RATT and the first annotation will '
                                                     'be used as the reference database in the Prokka reference '
                                                     'step.',
                          required=True)
    required.add_argument('-e', '--eggnog-databases', help='Directory of the eggnog databases downloaded using '
                                                           'download_eggnog_data.py. Full path only',
                          dest='database_dir',
                          required=True)
    optional.add_argument('-o', '--output', help='Directory to output all new annotation files. Default is the current '
                                                 'working directory. Full path only',
                          default=os.getcwd())
    optional.add_argument('-n', '--nproc', help='Number of processors/CPUs to use. Default is 1',
                          default='1')
    optional.add_argument('-v', '--version', help='Print version and exit',
                          action='store_true')
    optional.add_argument('--verbose', action='store_true', help='Verbose output')
    return parser.parse_args()


def main():
    args = cmds()
    script_dir = os.path.abspath(os.path.dirname(__file__))
    if args.version:
        print __version__
        exit()
    verify_installations(args.database_dir)
    start_time = time.time()
    print '\n\t\t\tPlease cite:\n\t\t\t[manuscript submitted]\n\n'
    if args.verbose:
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s:%(levelname)s:%(name)s:%(message)s')
    else:
        logging.basicConfig(level=logging.INFO,
                            format='%(asctime)s:INFO:%(name)s:%(message)s')
    logger = logging.getLogger('AnnoTUB')
    cwd = os.getcwd() + '/'
    # Convert all input paths to full path if not given as full path
    if not args.genomes.startswith('/'):
        args.genomes = cwd + args.genomes
    if not args.references.startswith('/'):
        args.references = cwd + args.references
    if not args.output.startswith('/'):
        args.output = cwd + args.output
    # Moving into the desired annotation directory
    os.chdir(args.output)
    refdir = args.output + 'temp_references/'
    try:
        os.mkdir(refdir)
    except OSError:
        pass
    all_embls = [i for i in os.listdir(args.references) if i.endswith('.embl')]
    if len(all_embls) >= 30:
        embls = all_embls[0:29]
    else:
        embls = all_embls
    logger.info('Getting first ' + str(len(embls)) + ' reference annotations')
    for e in embls:
        try:
            shutil.copyfile(args.references + e, refdir + e)
            shutil.copyfile(args.references + e, refdir + e.split('.')[0] + '.gbk')
            shutil.copyfile(args.references + e, refdir + e.split('.')[0] + '.gff')
        except OSError:
            continue
    ref_cds = get_first_reference_proteome(args.references + embls[0].split('.')[0] + '.gbk')
    genome_count = 0
    for f in os.listdir(args.genomes):
        if f.endswith('.fasta'):
            genome_count += 1
            run_ratt_prokka(ref_dir=refdir,
                            fasta=args.genomes + f,
                            ref_cds=args.output + ref_cds,
                            script_dir=script_dir,
                            cpus=args.nproc)
            annomerge.run(isolate_id=f.split('.')[0],
                          annotation_fp=os.getcwd(),
                          ref_proteins_fasta=ref_cds,
                          ref_embl_fp=refdir,
                          isolate_fasta_fp=args.genomes + f,
                          script_directory=script_dir)
    run_clustering(annotations=refdir,
                   nproc=args.nproc)
    run_eggnog_mapper(script_dir=script_dir,
                      nproc=args.nproc,
                      emapper_loc=args.database_dir)
    logger.info('Finished. Annotated ' + str(genome_count) + ' genomes. Genbank and GFF are located in ' + args.output)
    logger.info('Time elapsed: ' + str((time.time() - start_time) / 60.0) + 'min')
    logger.info('Thank you for using AnnoTUB. We hope to see you again!')


if __name__ == '__main__':
    main()
